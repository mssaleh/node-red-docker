apiVersion: v1
kind: ConfigMap
metadata:
  name: nodered-settings
data:
  settings.js: |
    module.exports = {
      credentialSecret: process.env.NODE_RED_CREDENTIAL_SECRET,
      adminAuth: {
        type: "credentials",
        users: [
            {
                username: process.env.NODE_RED_ADMIN_USERNAME || "admin",
                password: process.env.NODE_RED_ADMIN_HASHED_PASSWORD || "",
                permissions: "*"
            }
        ]
      },
      httpNodeAuth: {
        user: process.env.NODE_RED_HTTP_USERNAME || "http",
        pass: process.env.NODE_RED_HTTP_HASHED_PASSWORD || "",
      },
    };
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nodered-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-red
  labels:
    app: node-red
spec:
  replicas: 1
  selector:
    matchLabels:
      app: node-red
  template:
    metadata:
      labels:
        app: node-red
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: node-red
        image: ghcr.io/mssaleh/node-red-docker:main
        imagePullPolicy: Always
        env:
          - name: TZ
            value: "Asia/Dubai"
          - name: NODE_RED_CREDENTIAL_SECRET
            valueFrom:
              secretKeyRef:
                name: nodered-secret
                key: credentials
          - name: NODE_RED_ADMIN_USERNAME
            valueFrom:
              secretKeyRef:
                name: nodered-secret
                key: admin-username
          - name: NODE_RED_ADMIN_HASHED_PASSWORD
            valueFrom:
              secretKeyRef:
                name: nodered-secret
                key: admin-password
          - name: NODE_RED_HTTP_USERNAME
            valueFrom:
              secretKeyRef:
                name: nodered-secret
                key: http-username
          - name: NODE_RED_HTTP_HASHED_PASSWORD
            valueFrom:
              secretKeyRef:
                name: nodered-secret
                key: http-password
        ports:
          - containerPort: 1880
        volumeMounts:
          - name: nodered-data-volume
            mountPath: /data
          - name: nodered-settings
            mountPath: /data/settings.js
            subPath: settings.js

      volumes:
        - name: nodered-data-volume
          persistentVolumeClaim:
            claimName: nodered-data
        - name: nodered-settings
          configMap:
            name: nodered-settings

---
apiVersion: v1
kind: Service
metadata:
  name: node-red
spec:
  selector:
    app: node-red
  ports:
    - port: 1880
      targetPort: 1880
      protocol: TCP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: node-red
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production
    kubernetes.io/tls-acme: 'true'
spec:
  rules:
    - host: nodered.nxu.ae
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: node-red
                port:
                  number: 1880
  ingressClassName: nginx
  tls:
    - hosts:
        - nodered.nxu.ae
      secretName: nodered-nxu-ae-tls