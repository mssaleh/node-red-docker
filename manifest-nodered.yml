apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nodered-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-red
  labels:
    app: node-red
spec:
  replicas: 1
  selector:
    matchLabels:
      app: node-red
  template:
    metadata:
      labels:
        app: node-red
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: node-red
        image: ghcr.io/mssaleh/nodered-docker:main
        imagePullPolicy: Always
        env:
          - name: TZ
            value: "Asia/Dubai"
          - name: NODE_RED_CREDENTIAL_SECRET
            value: "unsafe"
          - name: NODE_RED_ADMIN_USERNAME
            value: "admin"
          - name: NODE_RED_ADMIN_HASHED_PASSWORD
            value: "unsafe"
          - name: NODE_RED_HTTP_USERNAME
            value: "http"
          - name: NODE_RED_HTTP_HASHED_PASSWORD
            value: "unsafe"
        ports:
          - containerPort: 1880
        volumeMounts:
          - name: nodered-data-volume
            mountPath: /data
      volumes:
      - name: nodered-data-volume
        persistentVolumeClaim:
          claimName: nodered-data
---
apiVersion: v1
kind: Service
metadata:
  name: node-red
spec:
  selector:
    app: node-red
  ports:
    - port: 1880
      targetPort: 1880
      protocol: TCP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: node-red
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production
    kubernetes.io/tls-acme: 'true'
spec:
  rules:
  - host: nodered.nxu.ae
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: node-red
            port:
              number: 1880
  ingressClassName: nginx
  tls:
    - hosts:
        - nodered.nxu.ae
      secretName: nodered-nxu-ae-tls